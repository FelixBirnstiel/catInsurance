openapi: 3.0.0
info:
  title: Cat Insurance API
  version: 1.0.0
servers:
- url: https://api.catinsurance.com/v1
paths:
  /customers:
    get:
      tags:
      - Customer
      summary: Get all customers
      responses:
        "200":
          description: Customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerReq'
                x-content-type: application/json
    post:
      tags:
      - Customer
      summary: Create a new customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerReq'
        required: true
      responses:
        "201":
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRes'
        "400":
          description: Invalid input data
  /contracts:
    post:
      tags:
      - Contract
      summary: Create a new contract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractReq'
        required: true
      responses:
        "201":
          description: Contract created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractRes'
        "400":
          description: Invalid input data
  /contracts/rate:
    post:
      tags:
      - Contract
      summary: Calculate rate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateCalculationReq'
        required: true
      responses:
        "200":
          description: Rate calculated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateRes'
  /customers/search:
    get:
      tags:
      - Customer
      summary: Search for customers
      parameters:
      - name: id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: address
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerRes'
                x-content-type: application/json
  /customers/{customerId}:
    get:
      tags:
      - Customer
      summary: Get customer details
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: a
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRes'
    delete:
      tags:
      - Customer
      summary: Delete a customer
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Customer deleted
    patch:
      tags:
      - Customer
      summary: Update a customer
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerReq'
        required: true
      responses:
        "200":
          description: Customer updated
        "400":
          description: Invalid input data
  /customers/{customerId}/contracts:
    get:
      tags:
      - Customer
      - Contract
      summary: Get customer contracts
      parameters:
      - name: customerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Customer contracts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractRes'
                x-content-type: application/json
  /contracts/{contractId}:
    get:
      tags:
      - Contract
      parameters:
      - name: contractId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Contract details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractRes'
  /employees:
    post:
      tags:
      - Employee
      summary: Create a new employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeReq'
        required: true
      responses:
        "201":
          description: Employee created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRes'
        "400":
          description: Invalid input data
    patch:
      tags:
      - Employee
      summary: Update an employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeReq'
        required: true
      responses:
        "200":
          description: Employee updated
        "400":
          description: Invalid input data
  /employees/{employeeId}:
    get:
      tags:
      - Employee
      summary: Get employee details
      parameters:
      - name: employeeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRes'
components:
  schemas:
    dbId:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    dbIdObj:
      required:
      - id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/dbId'
    CustomerReq:
      required:
      - address
      - bankDetails
      - birthDate
      - familyStatus
      - firstName
      - grossIncome
      - jobStatus
      - lastName
      - socialSecurityNumber
      - taxId
      type: object
      properties:
        firstName:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Max
        lastName:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Mustermann
        title:
          type: string
          enum:
          - Dr.
          - Prof. Dr.
          - Dr. Dr.
          - Prof. Dr. Dr
        familyStatus:
          type: string
          enum:
          - ledig
          - verheiratet
          - geschieden
          - verwitwet
        birthDate:
          type: string
          format: date
        socialSecurityNumber:
          pattern: "^[0-9]{11}$"
          type: string
          example: "12345678901"
        taxId:
          pattern: "^[0-9]{11}$"
          type: string
          example: "12345678901"
        jobStatus:
          type: string
          enum:
          - arbeitslos
          - Schueler
          - Student
          - Vollzeit
          - Teilzeit
          - Minijob
          - Werkstudent
        address:
          $ref: '#/components/schemas/Address'
        bankDetails:
          $ref: '#/components/schemas/BankDetails'
      example:
        firstName: Max
        lastName: Mustermann
        bankDetails:
          iban: DE89 3704 0044 0532 0130 00
          name: Max Mustermann
          bic: INGDDEFFXXX
        jobStatus: arbeitslos
        address:
          zipCode: 12345
          city: Musterstadt
          street: Beispielstrasse
          houseNumber: "42"
        socialSecurityNumber: "12345678901"
        taxId: "12345678901"
        title: Dr.
        birthDate: 2000-01-23
        familyStatus: ledig
    CustomerRes:
      allOf:
      - $ref: '#/components/schemas/CustomerReq'
      - $ref: '#/components/schemas/dbIdObj'
    ContractReq:
      required:
      - birthDate
      - breed
      - catName
      - color
      - coverage
      - customerId
      - endDate
      - environment
      - neutered
      - personality
      - startDate
      - weight
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        coverage:
          minimum: 1
          type: number
          example: 50000
        catName:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Minka
        breed:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: bengal
        color:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: orange
        birthDate:
          type: string
          format: date
        neutered:
          type: boolean
        personality:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: verspielt
        environment:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Stadt
        weight:
          minimum: 50
          type: number
          description: In Gramm
        customerId:
          $ref: '#/components/schemas/dbId'
    ContractRes:
      allOf:
      - $ref: '#/components/schemas/ContractReq'
      - $ref: '#/components/schemas/dbIdObj'
    RateCalculationReq:
      required:
      - birthDate
      - breed
      - color
      - coverage
      - environment
      - neutered
      - personality
      - weight
      - zipCode
      type: object
      properties:
        coverage:
          minimum: 1
          type: number
          example: 50000
        breed:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: bengal
        color:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: orange
        birthDate:
          type: string
          format: date
        neutered:
          type: boolean
        personality:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: wild
        environment:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Stadt
        weight:
          minimum: 50
          type: number
          description: In Gramm
        zipCode:
          maximum: 99999
          minimum: 0
          type: number
    RateRes:
      type: object
      properties:
        rate:
          maximum: 99999
          minimum: 0
          type: number
      example:
        rate: 8008.2018217910690509597770869731903076171875
    Address:
      required:
      - city
      - houseNumber
      - street
      - zipCode
      type: object
      properties:
        street:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Beispielstrasse
        houseNumber:
          pattern: "^[0-9]{1,3}[a-z]?$"
          type: string
          example: "42"
        zipCode:
          maximum: 99999
          minimum: 0
          type: number
          example: 12345
        city:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Musterstadt
      example:
        zipCode: 12345
        city: Musterstadt
        street: Beispielstrasse
        houseNumber: "42"
    BankDetails:
      required:
      - bic
      - iban
      - name
      type: object
      properties:
        iban:
          pattern: "^[A-Z]{2}[0-9]{2}[A-Z]{4}[0-9]{7}([A-Z0-9]{0,16})?$"
          type: string
          example: DE89 3704 0044 0532 0130 00
        bic:
          pattern: "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$"
          type: string
          example: INGDDEFFXXX
        name:
          pattern: "^[A-Z][a-z]*$"
          type: string
          example: Max Mustermann
      example:
        iban: DE89 3704 0044 0532 0130 00
        name: Max Mustermann
        bic: INGDDEFFXXX
    EmployeeReq:
      required:
      - address
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: Mustermann
        address:
          $ref: '#/components/schemas/Address'
    EmployeeRes:
      allOf:
      - $ref: '#/components/schemas/EmployeeReq'
      - $ref: '#/components/schemas/dbIdObj'
